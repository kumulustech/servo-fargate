fargate:
  co-http:
    # cluster: default # Optional ECS cluster, assumes default cluster if no value is provided
    # NOTE cluster can also be specified via the environment variable 'FARGATE_CLUSTER', but the value in the config file takes precedence when specified
    # NOTE if the environment variable OPTUNE_ECS_USE_RANGES is set to true, the cpu and mem settings MUST be specified as type: 'range' with range config values
    service_name: co-http # Required, identifies fargate deployment to be tuned
    timeout_service_desired_count: 600 # Max time to wait for updated service to reach desired number of instances
    settings: # Used to update fargate task definition
      cpu: # Used to constrain posible CPU values. Defaults to all valid cpu increments listed here: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-cpu-memory-error.html
        type: 'enum'
        values: [ '0.25', '0.5', '1' ] # NOTE: values must be strings given in units of cores/vCPU (eg. 0.5 is 512 CPU units)
      memory: # Used to constrain posible Memory values. Defaults to all valid memory increments listed here: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-cpu-memory-error.html
        type: 'enum'
        values: [ '0.5', '1', '2' ] # NOTE: values must be strings given in units of GiB (eg. 0.5 is 512 MB)
      replicas:
        type: 'range'
        max: 20
    environment:
      GOGC: # example var, co-http runs a Go webserver and this tunes its garbage collector
        type: 'range'
        min: 50
        max: 300
        step: 10
        default: 100
      TEST:
        type: 'enum'
        unit: 'none'
        default: 'A'
        values:
        - 'A'
        - 'B'
        - 'C'
